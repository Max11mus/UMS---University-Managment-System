openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8080
    description: Generated server url
tags:
  - name: teachers
    description: Teacher API
  - name: lectures
    description: lecture API
  - name: students
    description: Student API
  - name: timetable
    description: Timetable API
paths:
  /teachers/{id}:
    get:
      tags:
        - teachers
      summary: Find Teacher by ID
      description: Returns one Teacher with ID
      operationId: findTeacher
      parameters:
        - name: id
          in: path
          description: Teacher UUID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherDto'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
    put:
      tags:
        - teachers
      summary: Update existed Teacher
      operationId: updateTeacher
      parameters:
        - name: id
          in: path
          description: Teacher UUID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeacherDto'
        required: true
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherDto'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
    delete:
      tags:
        - teachers
      summary: Delete existed Student
      operationId: deleteTeacher
      parameters:
        - name: id
          in: path
          description: Teacher to delete. Cannot null or empty
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TeacherDto'
        '400':
          description: BAD_REQUEST
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '404':
          description: NOT_FOUND
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponce'
  /students/{id}:
    get:
      tags:
        - students
      summary: Find Student by ID
      description: Returns one Student with ID
      operationId: findStudent
      parameters:
        - name: id
          in: path
          description: Student UUID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentDto'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
    put:
      tags:
        - students
      summary: Update existed Student
      operationId: updateStudent
      parameters:
        - name: id
          in: path
          description: Student UUID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentDto'
        required: true
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentDto'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
    delete:
      tags:
        - students
      summary: Delete existed Student
      operationId: deleteStudent
      parameters:
        - name: id
          in: path
          description: Student to delete. Cannot null or empty
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/StudentDto'
        '400':
          description: BAD_REQUEST
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '404':
          description: NOT_FOUND
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponce'
  /teachers:
    get:
      tags:
        - teachers
      summary: Show List of Teachers page by page
      description: Show One Page of List of Teachers
      operationId: findTeachers
      parameters:
        - name: pageable
          in: query
          description: page > 0 (default = 0), size > 1 (default = 5); masked by default values
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeacherDto'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '404':
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
    post:
      tags:
        - teachers
      summary: Add new Teacher
      operationId: addTeacher
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeacherDto'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherDto'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '404':
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
  /students:
    get:
      tags:
        - students
      summary: Show List of Students page by page
      description: Show One Page of List of Students
      operationId: findStudents
      parameters:
        - name: pageable
          in: query
          description: page > 0 (default = 0), size > 1 (default = 5); masked by default values
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentDto'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '404':
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
    post:
      tags:
        - students
      summary: Add new Student
      operationId: addStudent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentDto'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentDto'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '404':
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
  /timetable/teacher/{id}:
    get:
      tags:
        - timetable
      summary: Show List of TimetableUnits For Teacher with ID
      operationId: getTimeTableForTeacher
      parameters:
        - name: id
          in: path
          description: Teavher UUID. Cannot null or empty
          required: true
          schema:
            type: string
        - name: startDay
          in: query
          description: Starting Day. Cannot null or empty. Format yyyy-mm-dd
          required: true
          schema:
            type: string
        - name: endDay
          in: query
          description: Ending Day. Cannot null or empty. Format yyyy-mm-dd
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeTableUnitDto'
        '400':
          description: BAD_REQUEST
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '404':
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponce'
  /timetable/student/{id}:
    get:
      tags:
        - timetable
      summary: Show List of TimetableUnits For Student with ID
      operationId: getTimeTableForStudent
      parameters:
        - name: id
          in: path
          description: Student UUID. Cannot null or empty
          required: true
          schema:
            type: string
        - name: startDay
          in: query
          description: Starting Day. Cannot null or empty. Format yyyy-mm-dd
          required: true
          schema:
            type: string
        - name: endDay
          in: query
          description: Ending Day. Cannot null or empty. Format yyyy-mm-dd
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeTableUnitDto'
        '400':
          description: BAD_REQUEST
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '404':
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponce'
  /lectures/{id}:
    get:
      tags:
        - lectures
      summary: Find Lecture by ID
      description: Returns one Lecture with ID
      operationId: findLecture
      parameters:
        - name: id
          in: path
          description: Lecture UUID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LectureDto'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponce'
components:
  schemas:
    ErrorResponce:
      type: object
      properties:
        httpStatusCode:
          type: string
          description: 'HttpStatus: BAD_REQUEST, INTERNAL_SERVER_ERROR, etc.'
          example: BAD_REQUEST
          enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
        message:
          type: string
          description: Error Message
          example: 'findTeacher.id: 111-222-333-444  isn''t correct  UUID. See RFC 4122 - 4.1. Format'
        description:
          type: string
          description: Error Description
          example: The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
    TeacherDto:
      required:
        - academicDegree
        - birthDate
        - email
        - employmentDate
        - hashedPassword
        - id
        - login
        - name
        - surname
      type: object
      properties:
        id:
          type: string
          description: Unique UUID identifier of the Teacher.
          format: uuid
          example: 12611b1e-b277-4e64-8ff3-243a5d6fbc2d
        name:
          maxLength: 20
          minLength: 0
          type: string
          description: Name of the Teacher.
          example: Suzanne
        surname:
          maxLength: 20
          minLength: 0
          type: string
          description: Surname of the Teacher.
          example: Gallagher
        birthDate:
          type: string
          description: Birth Date of Teacher in YYYY-mm-DD format
          format: date
          example: '1973-10-20'
        timeZone:
          type: object
          properties:
            displayName:
              type: string
            id:
              type: string
            dstsavings:
              type: integer
              format: int32
            rawOffset:
              type: integer
              format: int32
          description: TimeZone of Teacher
          nullable: true
          example: UTC
        login:
          maxLength: 255
          minLength: 0
          type: string
          description: Login of Teacher, must be uniqe
          example: Suzi.Gallagher
        email:
          maxLength: 255
          minLength: 0
          type: string
          description: Email of Teacher, must be uniqe
          example: Suzi.Gallagher@gmail.com
        avatarPath:
          maxLength: 1024
          minLength: 0
          type: string
          description: AvatarLink of Teacher
          nullable: true
          example: https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50.jpg
        hashedPassword:
          maxLength: 255
          minLength: 0
          type: string
          description: 'Hashed Password of Teacher '
        academicDegree:
          maxLength: 255
          minLength: 0
          type: string
          description: Academic Degree of Teacher
          example: Master of Science
        employmentDate:
          type: string
          description: Employment Date of the Teacher in YYYY-mm-DD format
          format: date
          example: '2022-07-07'
    StudentDto:
      required:
        - birthDate
        - email
        - enrollDate
        - hashedPassword
        - id
        - login
        - name
        - surname
      type: object
      properties:
        id:
          type: string
          description: Unique UUID identifier of the Student.
          format: uuid
          example: 12611b1e-b277-4e64-8ff3-243a5d6fbc2d
        name:
          maxLength: 20
          minLength: 0
          type: string
          description: Name of the Student.
          example: Suzanne
        surname:
          maxLength: 20
          minLength: 0
          type: string
          description: Surname of the Student.
          example: Gallagher
        birthDate:
          type: string
          description: Birth Date of Student in YYYY-mm-DD format
          format: date
          example: '1973-10-20'
        timeZone:
          type: object
          properties:
            displayName:
              type: string
            id:
              type: string
            dstsavings:
              type: integer
              format: int32
            rawOffset:
              type: integer
              format: int32
          description: TimeZone of Student
          nullable: true
          example: UTC
        login:
          maxLength: 255
          minLength: 0
          type: string
          description: Login of Student, must be uniqe
          example: Suzi.Gallagher
        email:
          maxLength: 255
          minLength: 0
          type: string
          description: Email of Student, must be uniqe
          example: Suzi.Gallagher@gmail.com
        avatarPath:
          maxLength: 1024
          minLength: 0
          type: string
          description: AvatarLink of Student
          nullable: true
          example: https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50.jpg
        hashedPassword:
          maxLength: 255
          minLength: 0
          type: string
          description: 'Hashed Password of Student '
        dropoutDate:
          type: string
          description: Dropout Date of the Student in YYYY-mm-DD format
          format: date
          example: '2022-07-07'
        enrollDate:
          type: string
          description: Enroll Date of the Student in YYYY-mm-DD format
          format: date
          example: '2022-07-07'
    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        students:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Student'
      description: Array of Group Object.
    Lecture:
      type: object
      properties:
        id:
          type: string
          format: uuid
        topic:
          type: string
        description:
          type: string
        teacher:
          $ref: '#/components/schemas/Teacher'
        subject:
          $ref: '#/components/schemas/Subject'
      description: Lecture Object.
    Location:
      type: object
      properties:
        id:
          type: string
          format: uuid
        address:
          type: string
      description: Location Object.
    Student:
      required:
        - enrollDate
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        surname:
          type: string
        birthDate:
          type: string
          format: date
        timeZone:
          type: object
          properties:
            displayName:
              type: string
            id:
              type: string
            dstsavings:
              type: integer
              format: int32
            rawOffset:
              type: integer
              format: int32
        login:
          type: string
        email:
          type: string
        avatarPath:
          type: string
        hashedPassword:
          type: string
        enrollDate:
          type: string
          format: date
        dropoutDate:
          type: string
          format: date
    Subject:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
      description: Subject Object.
    Teacher:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        surname:
          type: string
        birthDate:
          type: string
          format: date
        timeZone:
          type: object
          properties:
            displayName:
              type: string
            id:
              type: string
            dstsavings:
              type: integer
              format: int32
            rawOffset:
              type: integer
              format: int32
        login:
          type: string
        email:
          type: string
        avatarPath:
          type: string
        hashedPassword:
          type: string
        academicDegree:
          type: string
        employmentDate:
          type: string
          format: date
      description: Teacher Object.
    TimeTableUnitDto:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: Unique UUID identifier of the TimeTableUnit.
          format: uuid
          example: 12611b1e-b277-4e64-8ff3-243a5d6fbc2d
        location:
          $ref: '#/components/schemas/Location'
        lecture:
          $ref: '#/components/schemas/Lecture'
        groups:
          uniqueItems: true
          type: array
          description: Array of Group Object.
          items:
            $ref: '#/components/schemas/Group'
        begin:
          type: string
          description: 'Time of beginning in format: yyyy-mm-dd HH:mm:ss.SSS'
          format: date-time
        end:
          type: string
          description: 'Time of ending in format: yyyy-mm-dd HH:mm:ss.SSS'
          format: date-time
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    LectureDto:
      required:
        - description
        - id
        - subject
        - teacher
        - topic
      type: object
      properties:
        id:
          type: string
          description: Unique UUID identifier of the Lecture.
          format: uuid
          example: 12611b1e-b277-4e64-8ff3-243a5d6fbc2d
        topic:
          maxLength: 255
          minLength: 0
          type: string
          description: Topic of the Lecture.
          example: SQL
        description:
          maxLength: 1024
          minLength: 0
          type: string
          description: Description of the Lecture.
          example: SQL - Structured Query Language
        teacher:
          $ref: '#/components/schemas/Teacher'
        subject:
          $ref: '#/components/schemas/Subject'
